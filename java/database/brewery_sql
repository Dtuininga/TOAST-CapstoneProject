-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.users
(
    user_id integer NOT NULL DEFAULT nextval('seq_user_id'::regclass),
    username character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(200) COLLATE pg_catalog."default" NOT NULL,
    role character varying(50) COLLATE pg_catalog."default" NOT NULL,
    review_id integer NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS public.brewery
(
    brewery_id serial NOT NULL,
    brewery_img character varying(500),
    brewery_hours character varying(200),
    brewery_history character varying(500),
    brewery_email character varying(100),
    beer_id integer NOT NULL,
    brewery_name character varying(200),
    brewery_phone character varying(10),
    brewery_website character varying(200),
    brewery_active boolean,
    brewery_address character varying(100),
    CONSTRAINT brewery_email UNIQUE (brewery_email)
);

CREATE TABLE IF NOT EXISTS public.review
(
    review_id serial NOT NULL,
    beer_id integer,
    review character varying(150),
    rating integer,
    user_id integer,
    PRIMARY KEY (review_id)
);

CREATE TABLE IF NOT EXISTS public.beers
(
    beer_id serial NOT NULL,
    beer_img character varying(500),
    brewery_id integer NOT NULL,
    beer_name character varying(200),
    beer_abv numeric(2, 1),
    beer_type character varying(60),
    beer_description character varying(200),
    beer_active boolean
);

CREATE TABLE IF NOT EXISTS public.brewery_location
(
    brewery_location_id serial NOT NULL,
    brewery_id integer NOT NULL,
    brewery_street character varying(100),
    brewery_city character varying(60),
    brewery_state character varying(30),
    brewery_zipcode integer
);

CREATE TABLE IF NOT EXISTS public.beers_brewery
(
    beers_brewery_id integer NOT NULL,
    brewery_brewery_id serial NOT NULL
);

ALTER TABLE IF EXISTS public.users
    ADD FOREIGN KEY (review_id)
    REFERENCES public.review (review_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.review
    ADD FOREIGN KEY (beer_id)
    REFERENCES public.brewery (beer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.beers
    ADD FOREIGN KEY (brewery_id)
    REFERENCES public.brewery (brewery_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.brewery_location
    ADD FOREIGN KEY (brewery_id)
    REFERENCES public.brewery_location (brewery_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.beers_brewery
    ADD FOREIGN KEY (beers_brewery_id)
    REFERENCES public.beers (brewery_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.beers_brewery
    ADD FOREIGN KEY (brewery_brewery_id)
    REFERENCES public.brewery (brewery_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;